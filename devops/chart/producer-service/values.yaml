replicaCount: 1

image:
  repository: demo/producer-service
  tag: "1.0"
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Ribbon mode
#  service - запросы сначала будут поступать в k8s сервисы,
#  pod - запросы будут поступать непосредственно в контейнеры(не поддерживается Istio и балансировка k8s)
#  при использование разных модов нужно учитывать(изменять) настройки Resilience4j CircuitBreaker
discoveryMode: pod

# Zipkin
#  probability - процент запросов по которым будет отправляться трассировочная иформация. (диапазон значений 0.0 - 1.0)
#  todo: лучший вариант это отправлять все в топик нужно это проработать
tracing:
  enabled: true
  zipkinUrl: "http://tracing/"
  probability: 1.0

# Logging
#  при включение активируется профиль elk, и в лог будет писаться сразу json доступный для экспорта в elk
#  logging.level аналогичен как в spring (package: level)
logging:
  elk:
    enabled: false
  level:
    root: info

serviceAccount:
  create: true
  name:

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 8080

resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
